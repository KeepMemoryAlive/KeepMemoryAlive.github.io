<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[coding]]></title>
  <link href="http://blog.youngxiao.com/atom.xml" rel="self"/>
  <link href="http://blog.youngxiao.com/"/>
  <updated>2016-03-15T17:20:21+08:00</updated>
  <id>http://blog.youngxiao.com/</id>
  <author>
    <name><![CDATA[young]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Five Blog]]></title>
    <link href="http://blog.youngxiao.com/blog/2016/03/15/my-five-blog/"/>
    <updated>2016-03-15T13:57:57+08:00</updated>
    <id>http://blog.youngxiao.com/blog/2016/03/15/my-five-blog</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Four Blog]]></title>
    <link href="http://blog.youngxiao.com/blog/2016/03/15/my-four-blog/"/>
    <updated>2016-03-15T13:45:13+08:00</updated>
    <id>http://blog.youngxiao.com/blog/2016/03/15/my-four-blog</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Third Blog]]></title>
    <link href="http://blog.youngxiao.com/blog/2016/03/15/my-third-blog/"/>
    <updated>2016-03-15T12:22:24+08:00</updated>
    <id>http://blog.youngxiao.com/blog/2016/03/15/my-third-blog</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Second Blog]]></title>
    <link href="http://blog.youngxiao.com/blog/2016/03/15/my-second-blog/"/>
    <updated>2016-03-15T10:56:57+08:00</updated>
    <id>http://blog.youngxiao.com/blog/2016/03/15/my-second-blog</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git基础知识]]></title>
    <link href="http://blog.youngxiao.com/blog/2016/03/15/my-first-blog/"/>
    <updated>2016-03-15T10:32:49+08:00</updated>
    <id>http://blog.youngxiao.com/blog/2016/03/15/my-first-blog</id>
    <content type="html"><![CDATA[<h1>Git原理</h1>

<ol>
<li><p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。重点在于<strong>分布式</strong>，每个人的电脑上都是一个完整的版本库，所以<strong>使用Git Commit的时候，不是提交到服务器，而是提交到本地的版本库</strong>。</p></li>
<li><p>工作区有一个隐藏目录.git，这就是Git在本机的版本库。 Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p></li>
<li><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p>

<p> 第一步是用<strong>git add把文件添加进去，实际上就是把文件修改添加到暂存区</strong>；</p>

<p> 第二步是用<strong>git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。（注意这只是提交到本地库的分支）</strong></p></li>
<li><p>远程仓库，指保存在服务器上的仓库，这里主要指github上托管的仓库。
<strong>这里有需要注意的地方：</strong></p>

<pre><code> A、github上建立仓库后，它也有分支的概念，本地仓库也有分支的概念，比如“https://github.com/KeepMemoryAlive/KeepMemoryAlive.github.io”这个仓库，其实它在github上可能有几个分支。

 B、本地仓库和远程库之间 必须要有tracking information，才能push 和 pull, 当我们用git clone时， 默认是建立的**本地master分支** 与 **远程master分支**之间的联系。
</code></pre></li>
</ol>


<h1>Git常用命令</h1>

<ul>
<li><p>git clone:如果不指定本地目录名，就同名，注意默认切出来的是master分支<br/>
<code>git clone: &lt;版本库的网址&gt; &lt;本地目录名&gt;</code></p></li>
<li><p>git remote: Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名.<br/>
  <code>git remote -v</code></p>

<p>   octopress       git://github.com/imathis/octopress.git (fetch)<br/>
   octopress       git://github.com/imathis/octopress.git (push)<br/>
  origin  <a href="https://github.com/KeepMemoryAlive/KeepMemoryAlive.github.io">https://github.com/KeepMemoryAlive/KeepMemoryAlive.github.io</a> (fetch)
  origin  <a href="https://github.com/KeepMemoryAlive/KeepMemoryAlive.github.io">https://github.com/KeepMemoryAlive/KeepMemoryAlive.github.io</a> (push)</p>

<p>  克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。<br/>
  <code>git clone -o jQuery https://github.com/jquery/jquery.git</code></p>

<p>  <code>git remote show &lt;主机名&gt;</code>: 查看该主机的详细信息<br/>
  <code>git remote add &lt;主机名&gt; &lt;网址&gt;</code> : 命令用于添加远程主机。<br/>
  <code>git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</code></p>

<p>  <strong>注意：</strong>  remote只代表对应的远程主机，并没有列出本地分支和远程分支之间的tracking information</p></li>
<li><p>git pull: 取回远程主机<strong>某个分支</strong>的更新，再与<strong>本地的指定分支合并</strong>。它的完整格式稍稍有点复杂。 <br/>
  <code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p>

<p>  在某些场合，Git会自动在本地分支与远程分支之间，建立一种<strong>追踪关系</strong>(tracking)。比如，<strong>在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系</strong>，也就是说，本地的master分支自动”追踪”origin/master分支。</p>

<p>  Git也允许手动建立追踪关系：<br/>
  <code>git branch --set-upstream master origin/next</code></p>

<p>  上面命令指定<strong>本地master</strong>分支追踪origin/next分支，如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。<br/>
  <code>git pull origin</code></p>

<p>  如果当前分支只有一个追踪分支，连远程主机名都可以省略。<br/>
  <code>git pull</code><br/>
  <strong>注意：用git pull时 一定要注意，本地分支与远程分支的对应关系，避免提错了</strong></p></li>
<li><p>git push:用于将本地分支的更新，推送到远程主机， 就是把本地库和远程库同步，相当于svn的提交。<br/>
<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></p>

<p>  <strong>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</strong><br/>
  <code>git push origin master</code><br/>
上面命令表示，将<strong>本地的master</strong>分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>

<p>  如果当前分支只有一个追踪分支，那么主机名都可以省略。<br/>
  <code>git push</code>  <strong>用这个命令一定要注意 当前的对应关系</strong></p></li>
<li><p>git status:查看当前工作区的修改</p></li>
<li><p>git log: 如果不带任何参数，它会列出所有历史记录，最近的排在最上方<br/>
  <code>git log -n</code> : 选择显示前N条。<br/>
  <code>git log --pretty=oneline</code> : 一行显示，只显示哈希值和提交说明。</p></li>
<li><p>git reflog: 列出了head曾经指向过的一系列commit.</p></li>
<li><p>git reset：回退版本<br/>
  <code>git reset --hard 66a4b03</code> 回退到66a4b03指定的版本，这个指通过 git reflog可以查看</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
