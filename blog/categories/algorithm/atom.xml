<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | coding]]></title>
  <link href="http://blog.youngxiao.com/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://blog.youngxiao.com/"/>
  <updated>2020-06-01T21:23:06+08:00</updated>
  <id>http://blog.youngxiao.com/</id>
  <author>
    <name><![CDATA[young]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[计算机思维]]></title>
    <link href="http://blog.youngxiao.com/blog/thinking/"/>
    <updated>2020-04-16T16:45:23+08:00</updated>
    <id>http://blog.youngxiao.com/blog/thinking</id>
    <content type="html"><![CDATA[<p>计算机解决问题的方法和思路是有一些特别的，特意留意这些区别和方法有助于思考和解决一些问题。</p>

<!-- more -->


<ol>
<li><p>穷举法</p>

<p>在常人思维里, 一旦需要列举的数量成千上万，就没办法一一列举进行统计，转而尝试用<strong>统计计算</strong>的方法来得到答案;</p>

<p>而计算机思维里, 只要数量级不是非常高(在时间宽松的情况下), 都可以通过穷举的方法轻松列举出来.</p>

<p>例子：</p>

<p>计算2000-12-01到2234-09-01的所有日期中一共有多少个9？ 只需把日期按20010909这种格式，从开始到结束一一列出，</p>

<p>对每个数字按位统计即可。</p></li>
<li><p>搜索法</p>

<p>常人而言，对一个问题分析，分n种情况，每种情况下再继续分m中情况分析；正常人的大脑脑力，很难记住每种情况的结果。</p>

<p>在计算领域里，这类问题可以通过搜索算法解决，配合辅助数据结构，来达到遍历分支的每种情况。</p>

<p>搜索算法又根据具体问题分为很多种：BFS DFS 等等</p>

<p>BFS：广度优先搜索，一种穷举搜索的思想：先搜索第一层，全部搜完后，再搜第2层，依次下去&hellip; 用队列非常容易实现。</p>

<p>对于九宫格里最短路径之类的问题，往往可以采用BFS解决。</p>

<p>DFS：深度优先搜索，指根据一种情况搜索到底，然后再<strong>逐步回溯</strong>，再搜索到底，直到所有的情况的搜索完。</p>

<p>和BFS不同的是，它在搜索过程中，能够较快的丢弃不合适的分支情况。<strong>DFS采用递归来实现相对简单，在实现时，递归子调用后，</strong></p>

<p><strong>往往需要把状态复原，以达到回溯的目的。</strong></p>

<p>这些搜索非常重要的一点：<strong>状态保存。在搜索过程中，需要保存搜索到某个节点时的状态数据，以便后续接着这个节点搜索时</strong></p>

<p><strong>获得数据继续进行，</strong></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POJ 2796 单调栈]]></title>
    <link href="http://blog.youngxiao.com/blog/my-third-blog/"/>
    <updated>2016-03-15T12:22:24+08:00</updated>
    <id>http://blog.youngxiao.com/blog/my-third-blog</id>
    <content type="html"><![CDATA[<p>题目：给你一个序列，求其中一个子序列使得这个子序列和乘以这个子序列中最小值后最大（注，序列的值>=0)</p>

<p><strong>分析：</strong></p>

<p>（序列和 * 序列最小值）最大；对于一个元素，假设它是一个序列的最小值，则这个序列越长，最后的乘积就越大。</p>

<p>所以对于题目，我们只要对于<strong>每个元素，计算出“以这个元素作为序列最小值时，得到的最大乘积”</strong>，然后比较，取出最大值即可。</p>

<p>那问题的关键就在于，怎么得到 <strong>“以该元素作为序列最小值时的最长序列”，即从该元素开始像两边延伸到最大限度</strong></p>

<!-- more -->


<p>这个问题的特性就可以用单调栈来解决：</p>

<p><strong>单调栈:顾名思义就是在入栈时遵循单调原则，可以求出一个元素向左所能扩展到的最大长度，并不是说在这一段区间内是单调的，而是保证在该区间内该元素一定是最大或最小。</strong></p>

<p>我们有如下的性质：</p>

<ol>
<li>如果当前元素大于前一元素，那么前一元素能扩展到当前元素，同时说明前面的数对当前元素来说是没有贡献的</li>
<li>如果当前元素小于等于前一个元素，那么前面至少有一个元素不能扩展到当前元素的位置，那么这些不能继续扩展的元素的存在显的没有什么意义了，不妨删除它。</li>
</ol>


<p>我们得到两条结论：</p>

<p>1.一旦一个元素已经进入栈中那么这个元素向左扩展的位置就确定下来了.</p>

<p>2.一旦一个元素出栈被弹出栈,那么这个元素向右扩展的位置也确定下来了.</p>

<p>附本题代码：</p>

<pre><code>#include&lt;iostream 
#include&lt;stack&gt;
#include&lt;stdio.h&gt;
using namespace std;
#define maxx 110000
__int64 str[maxx],t[maxx];
struct node
{
    __int64 num,pre,next;//num记录数值，pre记录向前延伸多少个，next记录向后延伸多少个,k记录本身所处的位置
    __int64 k;
};
int main()
{
    int n;
    while(scanf("%d",&amp;n)&gt;0)
    {
        stack&lt;node&gt;Q;
        node tmp;
        __int64 ans=-100,sum=-100,num;
        str[0]=0;
        for(__int64 i=1;i&lt;=n;i++)
        {
            scanf("%I64d",&amp;t[i]);
            if(i==1)
                str[i]=t[i];
            else
                str[i]=str[i-1]+t[i];
        }
        tmp.num=t[1];
        tmp.pre=1;
        tmp.next=1;
        tmp.k=1;
        Q.push(tmp);
        __int64 x=0,y=0;
        for(__int64 i=2;i&lt;=n;i++)
        {
            node tmp1;
            tmp1.num=t[i];
            tmp1.pre=tmp1.next=1;
            tmp1.k=i;
            while(!Q.empty()&amp;&amp;tmp1.num&lt;=Q.top().num)
            {
                tmp=Q.top();
                Q.pop();
                if(!Q.empty())
                    Q.top().next+=tmp.next;
                tmp1.pre+=tmp.pre;
                ans=tmp.num*(str[tmp.k+tmp.next-1]-str[tmp.k-tmp.pre]);
                if(ans&gt;=sum)
                {
                    sum=ans;
                    x=tmp.k-tmp.pre+1;
                    y=tmp.k+tmp.next-1;
                }
            }
            Q.push(tmp1);
        }

        while(!Q.empty())
        {
            tmp=Q.top();
            Q.pop();
            if(!Q.empty())
                Q.top().next+=tmp.next;
            ans=tmp.num*(str[tmp.k+tmp.next-1]-str[tmp.k-tmp.pre]);
            if(ans&gt;=sum)
            {
                sum=ans;
                x=tmp.k-tmp.pre+1;
                y=tmp.k+tmp.next-1;
            }
        }

        if(n==0)x=y=0;
        printf("%I64d\n%I64d %I64d\n",sum,x,y);
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
